<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Import on 0x000216</title><link>https://Nexus-Security.github.io/tags/import/</link><description>Recent content in Import on 0x000216</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 25 Jan 2024 16:01:56 +0000</lastBuildDate><atom:link href="https://Nexus-Security.github.io/tags/import/index.xml" rel="self" type="application/rss+xml"/><item><title>Importing 725,000 Records into Dynamics GP in Just Half a Minute</title><link>https://Nexus-Security.github.io/importing-725-000-records-into-dynamics-gp-in-just-half-a-minute/</link><pubDate>Thu, 25 Jan 2024 16:01:56 +0000</pubDate><guid>https://Nexus-Security.github.io/importing-725-000-records-into-dynamics-gp-in-just-half-a-minute/</guid><description>In a recent project, I tackled a complex integration challenge for a client dealing with large-volume remittance data. This client received consolidated monthly payments from major trading partners, accompanied by massive remittance advice files. These files, reaching sizes of 140MB and containing up to 725,000 rows, detailed the allocation of the payments across thousands of customer invoices.
Previously, the client&amp;rsquo;s accounting team manually processed these files in Excel, painstakingly entering transactions and applying payments.</description></item><item><title>Address Parsing: Bringing Unstructured Addresses into Dynamics GP - Part 1</title><link>https://Nexus-Security.github.io/address-parsing-bringing-unstructured-addresses-into-dynamics-gp-part-1/</link><pubDate>Wed, 15 Nov 2023 04:21:55 +0000</pubDate><guid>https://Nexus-Security.github.io/address-parsing-bringing-unstructured-addresses-into-dynamics-gp-part-1/</guid><description>A few years back, I tackled a Dynamics GP implementation involving the migration of over 30,000 customer records from a legacy AS400 system. The client provided the customer data in text files, but the real challenge lay in the data structure.
The AS400 stored data in free-form text fields like ADDRESS1, ADDRESS2, without dedicated fields for city, state, or zip code. This lack of structure resulted in data inconsistencies, errors, and random notes, making a clean import challenging.</description></item><item><title>Directly depositing direct deposit information</title><link>https://Nexus-Security.github.io/directly-depositing-direct-deposit-information/</link><pubDate>Tue, 20 Sep 2022 19:13:44 +0000</pubDate><guid>https://Nexus-Security.github.io/directly-depositing-direct-deposit-information/</guid><description>When implementing payroll for smaller companies (fewer than 250 employees), manual data entry might be acceptable and even beneficial for data accuracy. However, with larger implementations, like my current project involving over 1500 employees across three companies, manual entry isn&amp;rsquo;t feasible.
While integration tools help import most payroll data, direct deposit information requires extra caution. It&amp;rsquo;s crucial to avoid errors in account and routing numbers, making manual entry risky. Therefore, I use table imports for this specific data.</description></item></channel></rss>